version: '3'

dotenv:
- .env

vars:
  DC: docker-compose

tasks:
  default:
    desc: List tasks
    cmds:
    - task --list
    silent: true

  setup:
  # TODO: don't need etc_bi, do not simply copy .env as it should be filled by the user before mounting the container
    desc: Initial setup - create .env and required directories
    silent: true
    cmds:
    - test -f .env || cp .env.example .env
    - mkdir -p etc_bi session_folders
    - echo "✅ Setup complete!"

  build:
    desc: Build Docker images (development)
    cmds:
    - '{{.DC}} build'

  build:debug:
    desc: Build with verbose output for debugging
    cmds:
    - '{{.DC}} build --progress=plain --no-cache'

  up:
    desc: Start all services (development)
    cmds:
    - task: check-ecr-auth
    - '{{.DC}} up -d'

  up:force:
    desc: Start all services without ECR auth check (use with caution)
    cmds:
    - '{{.DC}} up -d'

  up:safe:
    desc: Start services with ECR error handling
    cmds:
    - |
      if task check-ecr-auth; then
        echo "✅ ECR authentication successful, starting all services..."
        {{.DC}} up -d
      else
        echo ""
        echo "❌ ECR authentication failed. Here are your options:"
        ./scripts/handle-ecr-error.sh
        exit 1
      fi

  down:
    desc: Stop all services
    cmds:
    - '{{.DC}} down'

  clean:
    desc: Stop services and remove containers, networks, and volumes
    cmds:
    - '{{.DC}} down -v --remove-orphans'
    - docker system prune -f

  # TODO: keep or too dangerous?
  # clean:host-venv:
  #   desc: Remove host .venv that might interfere with Docker volume
  #   cmds:
  #   - |
  #     if [[ -d "../backend/.venv" ]]; then
  #       echo "🧹 Removing host backend/.venv that might interfere with Docker volume..."
  #       rm -rf "../backend/.venv"
  #       echo "✅ Host .venv removed"
  #     else
  #       echo "✅ No host .venv found"
  #     fi

  logs:
    desc: Show logs from all services
    cmds:
    - '{{.DC}} logs -f'

  logs:backend:
    desc: Show logs from backend only
    cmds:
    - '{{.DC}} logs -f backend'

  shell:
    desc: Connect to backend container (development)
    interactive: true
    cmds:
    - '{{.DC}} exec backend bash'

  db:shell:
    desc: Connect to MariaDB with mysql client
    interactive: true
    cmds:
    - '{{.DC}} exec mariadb mysql -uroot -p1245487'

  restart:
    desc: Restart all services
    cmds:
    - '{{.DC}} restart'

  status:
    desc: Show status of all services
    cmds:
    - '{{.DC}} ps'

  full-setup:
    desc: Run full setup inside container (uses new lean approach)
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && ./scripts/setup-environment.sh && source ~/.env_setup && source ~/.dev_functions && devenv && task setup:full'"

  full-setup:legacy:
    desc: Run full setup using legacy approach (fallback if task not available)
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && ./scripts/setup-environment.sh && source ~/.env_setup && source ~/.dev_functions && devenv && full_setup'"

  setup:deps:
    desc: Run new dependency setup inside container
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && ./scripts/setup-deps.sh'"

  setup:environment:
    desc: Run complete environment setup (lean container approach)
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && ./scripts/setup-environment.sh'"

  container:task:
    desc: 'Run a task inside the container (usage: task container:task -- TASK_NAME)'
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && task {{.CLI_ARGS}}'"

  validate:setup:
    desc: Validate the new dependency management setup
    cmds:
    - "{{.DC}} exec backend bash -c 'cd /home/budgea_user/dev && ./scripts/validate-setup.sh'"

  migration:status:
    desc: Check container migration status
    cmds:
    - ./scripts/migration-status.sh

  install-woob:
    desc: Install woob modules in container
    # Note: Makefile uses 'install_woob' but the function present is 'update_woob' in additional_bashrc.
    # If needed, replace with: devenv && update_woob
    cmds:
    - "{{.DC}} exec backend bash -c 'devenv && install_woob'"

  setup-db:
    desc: Setup local database in container
    cmds:
    - "{{.DC}} exec backend bash -c 'devenv && setup_local_db'"

  test:backend:
    desc: Run backend tests
    cmds:
    - "{{.DC}} exec backend bash -c 'devenv && cd /home/budgea_user/dev/budgea && python -m pytest tests/'"

  test:woob:
    desc: Run woob tests
    cmds:
    - "{{.DC}} exec backend bash -c 'devenv && cd /home/budgea_user/dev/woob && python -m pytest'"

  check-env:
    desc: Check if environment is properly configured
    preconditions:
    - sh: test -f .env
      msg: ❌ .env file missing
    - sh: test -d ../backend
      msg: ❌ backend directory missing
    - sh: test -d ../woob
      msg: ❌ woob directory missing
    - sh: test -f ../proxynet.pem
      msg: ❌ proxynet.pem missing
    cmds:
    - echo "✅ Environment looks good!"

  check-ecr-auth:
    desc: Check ECR authentication status
    cmds:
    - ./scripts/check-ecr-auth.sh

  ecr-login:
    desc: Login to AWS ECR (run this if ECR auth fails)
    cmds:
    - aws sso login --profile artifacts
    - aws ecr get-login-password --profile artifacts --region eu-west-3 | docker login --username AWS --password-stdin 737968113546.dkr.ecr.eu-west-3.amazonaws.com

  up:no-webview:
    desc: Start services without webview (if ECR auth fails)
    cmds:
    - echo "⚠️  Starting without webview due to ECR authentication issues"
    - echo "💡 Run 'task ecr-login' then 'task up' to include webview"
    - '{{.DC}} up -d backend mariadb gearmand'

  help:ecr:
    desc: Show ECR authentication help
    cmds:
    - ./scripts/handle-ecr-error.sh

  backup-db:
    desc: Backup database data
    cmds:
    - "{{.DC}} exec mariadb sh -lc 'mysqldump -uroot -p1245487 --all-databases' > backup_$(date +%Y%m%d_%H%M%S).sql"
    silent: true

  debug:container:
    desc: Debug container by running with bash and TTY
    interactive: true
    cmds:
    - '{{.DC}} run --rm backend bash'

  debug:build:
    desc: Build with verbose output for debugging
    cmds:
    - '{{.DC}} build --progress=plain --no-cache'

  inspect:backend:
    desc: Show detailed information about backend container
    cmds:
    - "{{.DC}} exec backend bash -c 'env | sort && echo \"---\" && ps aux'"
