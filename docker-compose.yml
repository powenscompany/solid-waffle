services:
  backend:
    image: bookworm-powens-backend
    container_name: powens-backend
    build: .
    volumes:
      # TODO: transfer local .ssh/authorized_keys into docker /etc/bi/authorized_keys
      # TODO: bind to local 
      # Mount source code for development
      # :cached improves performance on macOS/Windows Docker Desktop (ignored on Linux)
    - ../woob:/home/budgea_user/dev/woob:cached
    - ../backend:/home/budgea_user/dev/backend:cached
    - ../apishell:/home/budgea_user/dev/apishell:cached
      # Keep venv inside container (avoid host .venv interfering)
      # The bind mount of ../backend to /home/budgea_user/dev/backend in docker-compose.yml
      # overlays whatever is in the image with your hostâ€™s directory, including an existing .venv.
      # TODO: build the whole venv outside of backend to avoid any special rules to interference
    - backend_venv:/home/budgea_user/dev/backend/.venv
      # Mount configuration and data directories
    # - ./etc_bi:/etc/bi/
    # TODO: needed?
    - ./session_folders:/var/log/bi/data
    - ./session_folders:/home/budgea_user/data
    - ./session_folders:/home/budgea_user/sessions
      # Mount SSH keys
    - ~/.ssh:/home/budgea_user/.ssh:ro
      # Mount ProxyNet certificate
    - ../proxynet.pem:/home/budgea_user/dev/proxynet.pem:ro
    env_file:
    - ../backend/.env.example
    - .env
    environment:
      # Database connection
    - MYSQL_ROOT_PASSWORD=1245487
    - MYSQL_DB_PASSWORD=qwer
      # Production-like configuration
    - PW_CONFIG_FILES=backend.conf
    - PW_API_PLUGINS=* -jobs -background -bddf -cleaner -encryption_migration -file_migration -ocr -oidc -payment_background_worker -regulation -categorization -categorization_ds
    - PW_API_RESTART_ON_UPDATE=1
    - PW_API_MANDATORY_TRANSACTIONS_PAGINATION=1
    - PW_SECRETS_PATH=/etc/bi/powens_secrets.json
    # - UV_INSECURE_HOST=*
    stdin_open: true
    tty: true
    command: bash
    ports:
    - 3158:3158
    depends_on:
    - mariadb
    - gearmand
    networks:
    - backend-network

  # Webview service using existing Docker image
  webview:
    image: ${ECR_REGISTRY}/docker/webview:${WEBVIEW_RELEASE_TAG:-latest}
    # keep platform: linux/amd64 here (pulls amd64 image, runs via emulation)
    platform: linux/amd64
    container_name: powens-webview
    environment:
      # Backend API configuration
    - API_URL=http://backend:3158
    - API_HOST=backend
    - API_PORT=3158
      # Webview configuration
    - NODE_ENV=development
    - PORT=8080
      # Authentication configuration (adapt based on your backend setup)
    - AUTH_ENABLED=true
    volumes:
      # Mount ProxyNet certificate if needed by webview
    - ../proxynet.pem:/dev/proxynet.pem:ro
    ports:
    - 8080:8080
    depends_on:
    - backend
    networks:
    - backend-network
    restart: unless-stopped

  gearmand:
    image: artefactual/gearmand:latest
    container_name: powens-backend-gearmand
    ports:
    - 4730:4730
    networks:
    - backend-network

  mariadb:
    image: mariadb:10.5
    container_name: powens-backend-mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1245487
    volumes:
    - mariadb_data:/var/lib/mysql
    ports:
    - 3306:3306
    networks:
    - backend-network

#TODO: work on that to implement local SFTP server needed to simulate session folders storage and retrieval
  # custom_sftp:
  #   image: custom_sftp
  #   container_name: powens-backend-sftp
  #   volumes:
  #     - $HOME/dev/lab/custom_sftp/data:/home/testing/ 
  #     - $HOME/dev/lab/custom_sftp/rsa_key/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key 
  #     - $HOME/dev/lab/custom_sftp/rsa_key/ssh_host_rsa_key.pub:/etc/ssh/ssh_host_rsa_key.pub 
  #     - $HOME/dev/lab/custom_sftp/main.yml:/etc/ansible/roles/cron_tasks/tasks/main.yml
  #     - $HOME/dev/lab/custom_sftp/ssh_key_pub/authorized_keys:/home/testing/.ssh/authorized_keys 
  #   ports:
  #     - "2222:22" 
  #   environment:
  #     SFTP_USERS: "testing:123456789:1001"
  #   platform: linux/amd64
  #   networks:
  #     - backend-network

  ############
  # Keymanager
  ############
  # TODO: get rid of that and all .env specific references +++ find solution for backend.conf trick of commenting the whole [cipherer] section
  keymanager-postgres:
    image: public.ecr.aws/docker/library/postgres:14.6-alpine
    hostname: keymanager-postgres
    container_name: keymanager-postgres
    restart: always
    ports:
    - 15432:5432
    volumes:
    - local-db-keymanager:/var/lib/postgresql/data
    environment:
    - POSTGRES_DB=keymanager
    - POSTGRES_USER=keymanager
    - POSTGRES_PASSWORD=keymanager
    # profiles:
    #   - keymanager
    networks:
    - backend-network

  keymanager-setup:
    container_name: keymanager-setup
    image: 737968113546.dkr.ecr.eu-west-3.amazonaws.com/docker/backend-keymanager:5.0.0
    platform: linux/amd64
    # ports:
    #   - 9000:9000
    environment:
    - KEYMANAGER_DATABASE_HOST=keymanager-postgres
    - KEYMANAGER_DATABASE_PORT=5432
    - KEYMANAGER_LOGGING_OUTPUT=stdout
    entrypoint: [bash, -c, sleep 1 && python3 manage.py migrate]
    depends_on:
    - keymanager-postgres
    # profiles:
    #   - init-keymanager
    networks:
    - backend-network

  keymanager:
    container_name: keymanager
    image: 737968113546.dkr.ecr.eu-west-3.amazonaws.com/docker/backend-keymanager:5.0.0
    platform: linux/amd64
    ports:
    - 9000:9000
    environment:
    - KEYMANAGER_DATABASE_HOST=keymanager-postgres
    - KEYMANAGER_DATABASE_PORT=5432
    - KEYMANAGER_LOGGING_OUTPUT=stdout
    entrypoint: [bash, -c, uwsgi --chdir=/usr/share/keymanager/keymanager --module=keymanager.wsgi:application]
    depends_on:
    - keymanager-postgres
    # profiles:
      # - keymanager
    networks:
    - backend-network
    stop_signal: SIGKILL

volumes:
  mariadb_data:

  # Keymanager database volume
  local-db-keymanager:

  # Backend venv (container-managed)
  backend_venv:

networks:
  backend-network:
    driver: bridge

